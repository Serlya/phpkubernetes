apiVersion: v1
kind: PersistentVolume
metadata:
  name: volume
  labels:
    "heptio.com/example": lamp
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/data"

---

apiVersion: v1
# https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
kind: PersistentVolumeClaim
metadata:
  # the name assigned here for our persistent volume
  # is referenced by the Deployment in volumes: persistentVolumeClaim: claimName
  name: database
  labels:
    "heptio.com/example": lamp
  annotations:
    # we want AWS to handle provisioning a volume with sane defaults
    # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#writing-portable-configuration
    volume.alpha.kubernetes.io/storage-class: default
# permissions and size of the volume
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    "heptio.com/example": lamp
spec:
  type: ClusterIP
  ports:
  - port: 3306
    protocol: TCP
  selector:
    app: mysql

---

apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: mysql
  labels:
    "heptio.com/example": lamp
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      volumes:
      - name: database
        persistentVolumeClaim:
          claimName: database
      containers:
      - name: mysql
        image: mysql:5.7
        volumeMounts:
        - name: database
          mountPath: /var/lib/mysql
          subPath: data
          name: database
        resources:
          requests:
            cpu: 0.8
            memory: 0.7Gi
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: rootpw
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: password
          - name: MYSQL_DATABASE
            value: sakila
        livenessProbe:
          tcpSocket:
            port: 3306
        ports:
        - containerPort: 3306
          name: mysql
